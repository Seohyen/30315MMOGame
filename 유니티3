테스트 - 패킷 2개

클라이언트에서 C_Chat 에 채팅메시지 보내기  보낸 것 서버 답변 메시지 S_Chat을 패킷 이용해 채팅 내용을 뿌리는 것 - 채팅 프로그램

MMO? X

XML 수정 
클라이언트 -> 서버 접속 바로 방에 넣음 실제 MMO 바로 X 클라이언트에 로그인해도 돼 신호 보내고 클라이언트에서 알았다는 패킷을 보내면  방에 입장을 시킬 것

MMO에서는 단순하게 입장만 하고 끝내는 것이 아니라
새로운 유저가 방이나 필드 존에 들어왔다면 주변에 있는 모든 유저가 볼수있게 알려야함 
반대로 금방 접속한 유저에게도 해당 룸에 있는 유저들의 정보를 전달해줘야 함 (GameRoom.Enter)

필요한 패킷 생성 

<?xml version="1.0" encoding="utf-8" ?>
<PDL>
    //S_ 사용할 패킷 
    //Broadcast 알림 용도 패킷 
    <packet name="S_BroadcastEnterGame">
        <int name="playerId"/>
        <float name="posX"/>
        <float name="posY"/>
        <float name="posZ"/>
    </packet>
    // 나가는 것을 알림
    <packet name="C_LeaveGame">  
    </packet>
    <packet name="S_BroadcastLeaveGame">
        <int name="playerId"/>
    </packet>
    <packet name="S_PlayerList">
        <list name="player">
            <bool name="isSelf"/>
            // 내 플레이어 인지 
            <int name="playerId"/>
            <float name="posX"/>
            <float name="posY"/>
            <float name="posZ"/>
        </list>
    </packet>
    
    
    //이동할 목적지 나 & 유저 
    <packet name="C_Move">
        <float name="posX"/>
        <float name="posY"/>
        <float name="posZ"/>
    </packet>
    //이동 알림
    <packet name="S_BroadcastMove">
        <int name="P"
        <float name="posX"/>
        <float name="posY"/>
        <float name="posZ"/>
    </packet>
</PDL>
모든 정보를 클라이언트세션에 넣는게 아니라 새로운 클래스를 생성해서 컨텐츠 코드를 다 넣어놓고 플레이어가 연결된 클라이언트 세션을 물고 있는게 좋음 

But 간단하게 만들 예정 


Enter - 에서 신입생한테 모든 플레이어 목록 전달 , 신입생 입장을 모두에게 알림
Broadcast - 패킷에서 S_Broadcast 가 들어가는 부분들은 Broadcast를 사용 할 것임 매개변수 ArraySegment로 수정 
Leave - Enter와 같이 나가는 것을 알려줌 
Move - 이동 알림 
위 부분들 패킷을 처리하는 부분을 ClientSession에서는 어떤 상황일 때 실행을 해주고 있는데 실제로는 클라이언트가 미리 요청을 할 수 있음
예) 클라이언트에서 로그아웃 버튼을 눌렀을 때
이것은 모두 PacketHandler에서 처리하고 있음


서버에서 클라가 보낸 패킷 처리
ClientSession.cs

using System;
using System.Net;
using System.Threading;
using ServerCore;

namespace Server
{
    class ClientSession : PacketSession
    {
        public int SessionId { get; set; }
        public GameRoom Room { get; set; }

        public float PosX { get; set; }
        public float PosY { get; set; }
        public float PosZ { get; set; }
        
        public override void OnConnected(EndPoint endPoint)
        {
            System.Console.WriteLine($"OnConnected : {endPoint}");
            ServerProgram.Room.Push(() => ServerProgram.Room.Enter(this));
        }

        public override void OnRecvPacket(ArraySegment<byte> buffer)
        {
            PacketManager.Instance.OnRecvPacket(this, buffer);
        }

        public override void OnDisconnected(EndPoint endPoint)
        {
            SessionManager.Instance.Remove(this); 
            if (Room != null)
            {
                GameRoom room = Room;
                room.Push(() => room.Leave(this));
                Room = null;
            }
            System.Console.WriteLine($"OnDisconnected : {endPoint}");
        }

        public override void OnSend(int numOfBytes)
        {
            // System.Console.WriteLine($"Transferred bytes : {numOfBytes}");
        }
    }
}
PacketHandler.cs

using System;
using System.Collections.Generic;
using System.Text;
using Server;
using ServerCore;

class PacketHandler
{
    // 클라이언트 쪽에서 나가고 싶다는 패킷을 명시적으로 보냈을 때
    // 알아서 나갈 수 있도록 해준다.
    public static void C_LeaveGameHandler(PacketSession session, IPacket packet)
    {
        ClientSession clientSession = session as ClientSession;
        if (clientSession.Room == null)
            return;

        GameRoom room = clientSession.Room;
        room.Push(() => room.Leave(clientSession));
    }

    public static void C_MoveHandler(PacketSession session, IPacket packet)
    {
        C_Move movePacket = packet as C_Move;
        ClientSession clientSession = session as ClientSession;

        if (clientSession.Room == null)
            return;
				// 클라로부터 수신한 패킷의 정보 출력
        System.Console.WriteLine($"{movePacket.posX}, {movePacket.posY}, {movePacket.posZ}");
        GameRoom room = clientSession.Room;
        room.Push(() => room.Move(clientSession, movePacket));
    }
}
GameRoom.cs

using System;
using System.Collections.Generic;
using System.Text;
using ServerCore;

namespace Server
{
    class GameRoom : IJobQueue
    {
        List<ClientSession> _sessions = new List<ClientSession>();
        JobQueue _jobQueue = new JobQueue();
        List<ArraySegment<byte>> _pendingList = new List<ArraySegment<byte>>();
        public void Push(Action job)
        {
            _jobQueue.Push(job);
        }

        public void Flush()
        {
            foreach (ClientSession s in _sessions)
            {
                s.Send(_pendingList);
            }

            // System.Console.WriteLine($"Flushed {_pendingList.Count} items");
            _pendingList.Clear();
        }

        // Broadcast를 해야하는 다양한 패킷에서 사용할 인터페이스이기 때문에
        // ArraySegment만 받도록 해서 좀더 범용적으로 사용할 수 있도록 함
        public void Broadcast(ArraySegment<byte> segment)
        {
            _pendingList.Add(segment);
        }

        public void Enter(ClientSession session)
        {
            // 플레이어 추가
            _sessions.Add(session);
            session.Room = this;

            // 새로 들어온 클라한테 모든 플레이어 목록 전송
            // 모든 플레이어 목록을 전달하는 패킷
            S_PlayerList players = new S_PlayerList();
            foreach (ClientSession s in _sessions)
            {
                players.players.Add(new S_PlayerList.Player()
                {
                    isSelf = (s == session),
                    playerId = s.SessionId,
                    posX = s.PosX,
                    posY = s.PosY,
                    posZ = s.PosZ,
                });
            }
            session.Send(players.Write());

            // 신입생 입장을 모두에게 알린다.
            S_BroadcastEnterGame enter = new S_BroadcastEnterGame();
            // 신입생 정보
            enter.playerId = session.SessionId;
            // 신입생의 처음 위치
            enter.posX = 0;
            enter.posY = 0;
            enter.posZ = 0;

            Broadcast(enter.Write());
        }
        public void Leave(ClientSession session)
        {
            // 플레이어 제거
            _sessions.Remove(session);

            // 모두에게 알린다.
            S_BroadcastLeaveGame leave = new S_BroadcastLeaveGame();
            leave.playerId = session.SessionId;
            Broadcast(leave.Write());
        }

        // 내가 이동하는 패킷이 왔다고 가정
        public void Move(ClientSession session, C_Move packet)
        {
            // 좌표 바꿔주고
            session.PosX = packet.posX;
            session.PosY = packet.posY;
            session.PosZ = packet.posZ;

            // 모두에게 알린다 
            S_BroadcastMove move = new S_BroadcastMove();
            move.playerId = session.SessionId;
            move.posX = session.PosX;
            move.posY = session.PosY;
            move.posZ = session.PosZ;

            Broadcast(move.Write());
        }
    }
}
클라에서 서버로 보내는 패킷 작업
더미 클라이언트에서는 이동하는 패킷을 시뮬레이션만 해줄 거기 때문에 빌드만 통과하기 위한 함수 작성 -> 실제로는 유니티 클라이언트 쪽에서 작업

using System;
using System.Collections.Generic;
using System.Text;
using DummyClient;
using ServerCore;

public class PacketHandler
{
    public static void S_BroadcastEnterGameHandler(PacketSession session, IPacket packet)
    {
        S_BroadcastEnterGame pkt = packet as S_BroadcastEnterGame;
        
    }
    public static void S_BroadcastLeaveGameHandler(PacketSession session, IPacket packet)
    {
        S_BroadcastEnterGame pkt = packet as S_BroadcastEnterGame;
        ServerSession serverSession = session as ServerSession;
        
    }

    public static void S_PlayerListHandler(PacketSession session, IPacket packet)
    {
        S_BroadcastEnterGame pkt = packet as S_BroadcastEnterGame;
        ServerSession serverSession = session as ServerSession;
        
    }
    public static void S_BroadcastMoveHandler(PacketSession session, IPacket packet)
    {
        S_BroadcastEnterGame pkt = packet as S_BroadcastEnterGame;
        ServerSession serverSession = session as ServerSession;
        
    }
}
using System;
using System.Collections.Generic;
using System.Net;
using System.Text;
using ServerCore;

namespace DummyClient
{
    class SessionManager
    {
        static SessionManager _session = new SessionManager();
        public  static SessionManager Instance { get { return _session; } }
        List<ServerSession> _sessions = new List<ServerSession>();
        object _lock = new object();

        Random _rand = new Random();
        public void SendForEach()
        {
            lock (_lock)
            {
                foreach (ServerSession session in _sessions)
                {
                    // 기존에 더미클라이언트에서 했던 역할은
                    // Generate 생성된 세션에게 채팅 패킷만 보내고 있는데 랜덤으로 설정된 이동 패킷을 보내는 작업 짆애 
                    C_Move movePacket = new C_Move();
                    movePacket.posX = _rand.Next(-50, 50);
                    movePacket.posY = 0;
                    movePacket.posZ = _rand.Next(-50, 50);

                    session.Send(movePacket.Write());
                }
            }
        }

        public ServerSession Generate()
        {
            lock (_lock)
            {
                ServerSession session = new ServerSession();
                _sessions.Add(session);
                return session;
            }
        }

    }
}
