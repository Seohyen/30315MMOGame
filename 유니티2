class PacketHandler
{
    public static void S_ChatHandler(PacketSession session, IPacket packet)
    {   
        S_Chat chatPacket = packet as S_Chat;
        ServerSession serverSession = session as ServerSession;

        if (chatPacket.playerId == 1)
        {
            // 플레이어를 찾아서 작업
            GameObject go = GameObject.Find("Player");
            if (go == null)
            {
                Debug.Log("Player not found");
            }
            else
            {
                Debug.Log("Player found");
            }
        }
    }
}
디버그가 아닌 기능 추가를 하고 싶음 
Find로 플레이어 찾아서 디버그 -> 서버에서는 정상적으로 실행되지만 로그가 더 이상 찍히지 않음

이유는? 

메인스레드 문제 스레드프레임에서 꺼내 실행했기때문, 유니티는 다른쓰레드에서 접근 X

큐를 생성해 패킷을 저장하고 유니티 게임스레드에서 하나씩 꺼내서 처리하게끔 만들 예정 
-> 작업스레드 Push , 메인스레드 Pop

PacketHandler에서 Queue에 밀어넣는 작업을 하지 않는 이유는? 
패킷 Queue에 있는 Packet을 Pop을 한 다음에 패킷 번호에 따라서 특정 함수를 호출할 수 있도록 자동화 
핸들러를 사용하지 않고 패킷 Queue에 다가 밀어넣는 작업-> 낭비

-->> 클라이언트패킷매니저에서 MakePacket 함수를 나눌 것임
->패킷을 만들고 바로 처리하지는않고 잠시 패킷큐에 넣고 나중에 네트워크매니저 업데이트에서 꺼내서 핸들러에 연결 후 핸들러에서 호출하게끔 만들음

패킷포멧에서 패킷제너레이터 갱신


# 실습 예제 코드

###작업쓰레드 영역
PacketQueuec.cs

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PacketQueue
{
    public static PacketQueue Instance { get; } = new PacketQueue();
    Queue<IPacket> _packetQueue = new Queue<IPacket>();
    object _lock = new object();

    public void Push(IPacket packet)
    {
        lock (_lock)
        {
            _packetQueue.Enqueue(packet);
        }
    }

    public IPacket Pop()
    {
        lock (_lock)
        {
            if (_packetQueue.Count == 0)
            {
                return null;
            }
            return _packetQueue.Dequeue();
        }
    }
}
ServerSession .cs

using System;
using System.Net;
using System.Text;
using ServerCore;

namespace DummyClient
{
    class ServerSession : PacketSession
    {
        public override void OnConnected(EndPoint endPoint)
        {
            System.Console.WriteLine($"OnConnected : {endPoint}");
        }

        public override void OnDisconnected(EndPoint endPoint)
        {
            System.Console.WriteLine($"OnDisconnected : {endPoint}");
        }

        public override void OnRecvPacket(ArraySegment<byte> buffer)
        {
            PacketManager.Instance.OnRecvPacket(this, buffer, (s, p) => PacketQueue.Instance.Push(p));
        }

        public override void OnSend(int numOfBytes)
        {
            // System.Console.WriteLine($"Transferred bytes : {numOfBytes}");
        }
    }
}
PacketManager.cs

using System;
using System.Collections.Generic;
using ServerCore;

class PacketManager
{
    #region Singlton
    static PacketManager _instance = new PacketManager();
    public static PacketManager Instance { get { return _instance; } }
    #endregion

    Dictionary<ushort, Func<PacketSession, ArraySegment<byte>, IPacket>> _makeFunc = new Dictionary<ushort, Func<PacketSession, ArraySegment<byte>, IPacket>>();
    Dictionary<ushort, Action<PacketSession, IPacket>> _handler = new Dictionary<ushort, Action<PacketSession, IPacket>>();

    PacketManager()
    {
        Register();
    }

    public void Register()
    {
        _makeFunc.Add((ushort)PacketID.C_Chat, MakePacket<C_Chat>);
        _handler.Add((ushort)PacketID.C_Chat, PacketHandler.C_ChatHandler);

    }
		
		// 메인 쓰레드랑 분리해서 작업을 하기 위해서 onRecvCallBack을 옵션으로 넣어준다.
    public void OnRecvPacket(PacketSession session, ArraySegment<byte> buffer, Action<PacketSession, IPacket> onRecvCallBack = null)
    {
        ushort count = 0;
        ushort size = BitConverter.ToUInt16(buffer.Array, buffer.Offset);
        count += 2;
        ushort packetId = BitConverter.ToUInt16(buffer.Array, buffer.Offset + count);
        count += 2;

        Func<PacketSession, ArraySegment<byte>, IPacket> func = null;
        if (_makeFunc.TryGetValue(packetId, out func))
        {
            IPacket packet = func.Invoke(session, buffer);
            if (onRecvCallBack != null)
            {
								// PacketQueue.Instance.Push(packet) 메서드 콜백
								// 즉 PacketQueue에 Packet 내용을 밀어 넣어준다.
                onRecvCallBack(session, packet);
            }
            else
            {
                HandlePacket(session, packet);
            }
        }
    }
    
    T MakePacket<T>(PacketSession session, ArraySegment<byte> buffer) where T : IPacket, new()
    {
        T packet = new T();
        packet.Read(buffer);
        
        return packet;
    }

    public void HandlePacket(PacketSession session, IPacket packet)
    {
        Action<PacketSession, IPacket> action = null;
        if (_handler.TryGetValue(packet.Protocol, out action))
        {
            action?.Invoke(session, packet);
        }
    }
}
###메인 쓰레드 영역
NetworkManager.cs

using System;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using DummyClient;
using ServerCore;
using UnityEngine;

public class NetworkManager : MonoBehaviour
{
    ServerSession _session = new ServerSession();
    // Start is called before the first frame update
    void Start()
    {
        string host = Dns.GetHostName();
        IPHostEntry ipHost =  Dns.GetHostEntry(host);
        IPAddress ipAddr = ipHost.AddressList[0];
        IPEndPoint endPoint = new IPEndPoint(ipAddr, 1111);
        
        Connector connector = new Connector();
        connector.Connect(endPoint, () => {return _session;}, 1);

        StartCoroutine("CoSendPacket");
    }

    // Update is called once per frame
    void Update()
    {
        // 이렇게만 하면 한 프레임에 하나의 패킷만 처리하게 되겠지만 
        // 다 비울 때까지 처리 => while
        // 일정 시간 동안에만 처리 => Coroutine
        IPacket packet = PacketQueue.Instance.Pop();
        if (packet != null)
        {
            // 유니티 메인 쓰레드에서 해당 패킷에 대한 작업을 진행한다.
            PacketManager.Instance.HandlePacket(_session, packet);
        }
    }

    IEnumerator CoSendPacket()
    {
        while (true)
        {
            yield return new WaitForSeconds(3.0f);

            C_Chat chatPacket = new C_Chat();
            chatPacket.chat = "Hello Unity!";
            ArraySegment<byte> segment = chatPacket.Write();
            _session.Send(segment);
        }
    }
}
using System;
using System.Collections.Generic;
using System.Text;
using DummyClient;
using ServerCore;
using UnityEngine;

class PacketHandler
{
    public static void S_ChatHandler(PacketSession session, IPacket packet)
    {   
    
        S_Chat chatPacket = packet as S_Chat;
        ServerSession serverSession = session as ServerSession;

        // if (chatPacket.playerId == 1)
        {
            Debug.Log(chatPacket.chat);
            // 플레이어를 찾아서 작업
            GameObject go = GameObject.Find("Player");
            if (go == null)
            {
                Debug.Log("Player not found");
            }
            else
            {
                Debug.Log("Player found");
            }
        }
    }
}


